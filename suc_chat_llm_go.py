# -*- coding: utf-8 -*-
"""suc_chat_llm_GO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19eiW7o7cPT59DFI9XrpnaL7v7bmbZSNO
"""











!wget https://golang.org/dl/go1.22.4.linux-amd64.tar.gz
!sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.22.4.linux-amd64.tar.gz
!export PATH=$PATH:/usr/local/go/bin

# تحقق من التثبيت
!go version

!wget https://go.dev/dl/go1.22.4.linux-amd64.tar.gz # تم التحديث إلى go.dev كما هو موضح في الإخراج
!sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.22.4.linux-amd64.tar.gz

# --- الطريقة الأولى: استخدام المسار الكامل (موصى به في Colab) ---
!/usr/local/go/bin/go version

# --- الطريقة الثانية: دمج export مع الأمر (للتحقق فقط) ---
# !export PATH=$PATH:/usr/local/go/bin && go version

!/usr/local/go/bin/go mod init chatbot # تهيئة وحدة Go
!/usr/local/go/bin/go get github.com/google/generative-ai-go/genai google.golang.org/api/option

!/usr/local/go/bin/go build chatbot.go
!./chatbot







!go mod init chatbot # تهيئة وحدة Go إذا لم تكن موجودة
!go get github.com/google/generative-ai-go/genai google.golang.org/api/option



# Commented out IPython magic to ensure Python compatibility.
# %%writefile chatbot.go
# package main
# 
# import (
# 	"bufio"
# 	"context"
# 	"fmt"
# 	"log"
# 	"os"
# 	"strings"
# 
# 	"github.com/google/generative-ai-go/genai"
# 	"google.golang.org/api/option"
# 
#     // نحتاج إلى استيراد مكتبة userdata للوصول إلى الأسرار في Colab
#     // هذا ليس جزءًا من Go القياسي، بل خاص ببيئة Colab Python
#     // لذلك، سنقرأ المفتاح من متغير بيئة يتم تعيينه لاحقًا
# )
# 
# func main() {
# 	// قراءة مفتاح API من متغير البيئة
#     // سيتم تعيين هذا المتغير في خطوة التشغيل التالية
# 	apiKey := os.Getenv("GEMINI_API_KEY_ENV")
# 	if apiKey == "" {
# 		log.Fatal("لم يتم تعيين متغير البيئة GEMINI_API_KEY_ENV")
# 	}
# 
# 	ctx := context.Background()
# 	// إنشاء عميل Gemini
# 	client, err := genai.NewClient(ctx, option.WithAPIKey(apiKey))
# 	if err != nil {
# 		log.Fatalf("فشل في إنشاء العميل: %v", err)
# 	}
# 	defer client.Close()
# 
# 	// اختيار نموذج Gemini (gemini-1.5-flash هو خيار جيد وسريع ومجاني للاستخدامات الأساسية)
# 	model := client.GenerativeModel("gemini-1.5-flash-latest")
#     // يمكنك أيضًا تجربة "gemini-pro"
# 
# 	fmt.Println("مرحباً! أنا شات بوت بسيط. اكتب 'خروج' للإنهاء.")
# 	fmt.Println("----------------------------------------------")
# 
# 	// بدء حلقة المحادثة
# 	scanner := bufio.NewScanner(os.Stdin)
# 	for {
# 		fmt.Print("أنت: ")
# 		// قراءة إدخال المستخدم
# 		if !scanner.Scan() {
# 			if err := scanner.Err(); err != nil {
# 				log.Printf("خطأ في قراءة الإدخال: %v", err)
# 			}
# 			break // الخروج إذا كان هناك خطأ أو نهاية الإدخال
# 		}
# 		userInput := scanner.Text()
# 
# 		// التحقق من أمر الخروج
# 		if strings.ToLower(userInput) == "خروج" {
# 			fmt.Println("وداعاً!")
# 			break
# 		}
# 
# 		// إرسال الإدخال إلى نموذج Gemini
# 		resp, err := model.GenerateContent(ctx, genai.Text(userInput))
# 		if err != nil {
# 			log.Printf("فشل في إنشاء الاستجابة: %v", err)
#             fmt.Println("بوت: عذراً، حدث خطأ أثناء معالجة طلبك.")
# 			continue // الاستمرار في الحلقة التالية
# 		}
# 
# 		// طباعة استجابة النموذج
# 		printResponse(resp)
# 	}
# }
# 
# // دالة مساعدة لطباعة الاستجابة بشكل منظم
# func printResponse(resp *genai.GenerateContentResponse) {
# 	fmt.Print("بوت: ")
# 	if resp == nil || len(resp.Candidates) == 0 || resp.Candidates[0].Content == nil || len(resp.Candidates[0].Content.Parts) == 0 {
# 		fmt.Println("لم يتم تلقي أي محتوى من النموذج.")
# 		return
# 	}
# 	// استخراج النص من الاستجابة
# 	// قد تكون الاستجابة مقسمة لأجزاء، نجمعها هنا
# 	var responseText strings.Builder
# 	for _, part := range resp.Candidates[0].Content.Parts {
#         // نتأكد أن الجزء هو نص قبل إضافته
#         if textPart, ok := part.(genai.Text); ok {
#              responseText.WriteString(string(textPart))
#         }
# 	}
#     fmt.Println(responseText.String())
# }

import os
from google.colab import userdata

# الوصول إلى السر المخزن في Colab
gemini_api_key = userdata.get('GEMINI_API_KEY')

# تعيينه كمتغير بيئة
os.environ['GEMINI_API_KEY_ENV'] = gemini_api_key

print("تم تعيين مفتاح API كمتغير بيئة.")









# Commented out IPython magic to ensure Python compatibility.
# %%writefile chatbot.go
# package main
# 
# import (
#     "bufio"
#     "context"
#     "fmt"
#     "log"
#     "os"
#     "strings"
# 
#     "github.com/google/generative-ai-go/genai"
#     "google.golang.org/api/option"
# )
# 
# func main() {
#     // --- التعديل هنا ---
#     // احذف هذا السطر:
#     // apiKey := os.Getenv("GEMINI_API_KEY_ENV")
#     // if apiKey == "" {
#     //     log.Fatal("لم يتم تعيين متغير البيئة GEMINI_API_KEY_ENV")
#     // }
# 
#     // وضع المفتاح مباشرة (غير آمن!)
#     // استبدل "AIzaSy..." بالمفتاح الفعلي الخاص بك
#     apiKey := "XXXXXXXXXXX" // <--- ضع المفتاح هنا مباشرة
# 
#     // --- نهاية التعديل ---
# 
# 
#     ctx := context.Background()
#     // إنشاء عميل Gemini
#     client, err := genai.NewClient(ctx, option.WithAPIKey(apiKey)) // سيستخدم المفتاح الموضوع مباشرة
#     if err != nil {
#         log.Fatalf("فشل في إنشاء العميل: %v", err)
#     }
#     defer client.Close()
# 
#     // اختيار نموذج Gemini
#     model := client.GenerativeModel("gemini-1.5-flash-latest")
# 
#     fmt.Println("مرحباً! أنا شات بوت بسيط. اكتب 'خروج' للإنهاء.")
#     fmt.Println("----------------------------------------------")
# 
#     // بدء حلقة المحادثة
#     scanner := bufio.NewScanner(os.Stdin)
#     for {
#         fmt.Print("أنت: ")
#         if !scanner.Scan() {
#             if err := scanner.Err(); err != nil {
#                 log.Printf("خطأ في قراءة الإدخال: %v", err)
#             }
#             break
#         }
#         userInput := scanner.Text()
# 
#         if strings.ToLower(userInput) == "خروج" {
#             fmt.Println("وداعاً!")
#             break
#         }
# 
#         resp, err := model.GenerateContent(ctx, genai.Text(userInput))
#         if err != nil {
#             log.Printf("فشل في إنشاء الاستجابة: %v", err)
#             fmt.Println("بوت: عذراً، حدث خطأ أثناء معالجة طلبك.")
#             continue
#         }
# 
#         printResponse(resp)
#     }
# }
# 
# func printResponse(resp *genai.GenerateContentResponse) {
#     fmt.Print("بوت: ")
#     if resp == nil || len(resp.Candidates) == 0 || resp.Candidates[0].Content == nil || len(resp.Candidates[0].Content.Parts) == 0 {
#         fmt.Println("لم يتم تلقي أي محتوى من النموذج.")
#         return
#     }
#     var responseText strings.Builder
#     for _, part := range resp.Candidates[0].Content.Parts {
#         if textPart, ok := part.(genai.Text); ok {
#              responseText.WriteString(string(textPart))
#         }
#     }
#     fmt.Println(responseText.String())
# }

!/usr/local/go/bin/go build chatbot.go
!./chatbot

